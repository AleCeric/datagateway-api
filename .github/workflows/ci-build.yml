name: CI
on: push
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: ['3.6', '3.7', '3.8']
    name: Python ${{ matrix.python-version }}
    steps:
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 8
        java-package: jdk

    - name: Checkout icat-ansible
      uses: actions/checkout@v2
      with:
        repository: mrichards99/icat-ansible
        ref: change-payara-setup-script-url
        path: icat-ansible
    - name: Create hosts file
      run: echo -e "[hosts-all]\nlocalhost.localdomain ansible_connection=local" > hosts
    - name: Prepare vault pass
      run: echo -e "icattravispw" > vault_pass.txt
    - name: Move vault to directory it'll get detected by Ansible
      run: mv vault.yml icat-ansible/group_vars/all
    - name: Replace default payara user with Actions user
      run: |
        'sed -i -e "s/^payara_user: \"glassfish\"/payara_user: \"runner\"/" icat-ansible/group_vars/all/vars.yml'

    - name: Run ICAT Ansible Playbook
      uses: saubermacherag/ansible-playbook-docker-action@v1.3
      with:
        playbookName: './hosts-all.yml'
        inventoryFile: './hosts'
        extraVars: "--vault-password-file ./vault_pass.txt"
        verbosity: "vv"

    - name: Checkout DataGateway API
      uses: actions/checkout@v2
      with:
        path: datagateway-api
    - name: Create log file
      run: touch logs.log
    - name: Configure log file location
      run: echo "`jq -r --arg REPO_DIR "$GITHUB_WORKSPACE/logs.log" \
        '.log_location=$REPO_DIR' config.json.example`" > config.json.example
    - name: Create config.json
      run: cp config.json.example config.json
    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64

    - name: Install Nox
      run: pip install nox==2020.8.22
    - name: Install Poetry
      run: pip install poetry==1.1.4
    - name: Run Nox safety session
      run: nox -s safety
    - name: Run Nox lint session
      if: always()
      run: nox -s lint
    - name: Run Nox black session
      if: always()
      run: nox -s black
    - name: Run Nox tests session
      if: always()
      run: nox -s tests
